// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: acme/v1/acme.proto

package pbacme

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PingPongService_GetPing_FullMethodName    = "/acme.v1.PingPongService/GetPing"
	PingPongService_StreamPing_FullMethodName = "/acme.v1.PingPongService/StreamPing"
)

// PingPongServiceClient is the client API for PingPongService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingPongServiceClient interface {
	GetPing(ctx context.Context, in *GetPingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	StreamPing(ctx context.Context, in *StreamPingRequest, opts ...grpc.CallOption) (PingPongService_StreamPingClient, error)
}

type pingPongServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPingPongServiceClient(cc grpc.ClientConnInterface) PingPongServiceClient {
	return &pingPongServiceClient{cc}
}

func (c *pingPongServiceClient) GetPing(ctx context.Context, in *GetPingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, PingPongService_GetPing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingPongServiceClient) StreamPing(ctx context.Context, in *StreamPingRequest, opts ...grpc.CallOption) (PingPongService_StreamPingClient, error) {
	stream, err := c.cc.NewStream(ctx, &PingPongService_ServiceDesc.Streams[0], PingPongService_StreamPing_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pingPongServiceStreamPingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PingPongService_StreamPingClient interface {
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type pingPongServiceStreamPingClient struct {
	grpc.ClientStream
}

func (x *pingPongServiceStreamPingClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingPongServiceServer is the server API for PingPongService service.
// All implementations must embed UnimplementedPingPongServiceServer
// for forward compatibility
type PingPongServiceServer interface {
	GetPing(context.Context, *GetPingRequest) (*PingResponse, error)
	StreamPing(*StreamPingRequest, PingPongService_StreamPingServer) error
	mustEmbedUnimplementedPingPongServiceServer()
}

// UnimplementedPingPongServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPingPongServiceServer struct {
}

func (UnimplementedPingPongServiceServer) GetPing(context.Context, *GetPingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPing not implemented")
}
func (UnimplementedPingPongServiceServer) StreamPing(*StreamPingRequest, PingPongService_StreamPingServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPing not implemented")
}
func (UnimplementedPingPongServiceServer) mustEmbedUnimplementedPingPongServiceServer() {}

// UnsafePingPongServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingPongServiceServer will
// result in compilation errors.
type UnsafePingPongServiceServer interface {
	mustEmbedUnimplementedPingPongServiceServer()
}

func RegisterPingPongServiceServer(s grpc.ServiceRegistrar, srv PingPongServiceServer) {
	s.RegisterService(&PingPongService_ServiceDesc, srv)
}

func _PingPongService_GetPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingPongServiceServer).GetPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PingPongService_GetPing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingPongServiceServer).GetPing(ctx, req.(*GetPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingPongService_StreamPing_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamPingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingPongServiceServer).StreamPing(m, &pingPongServiceStreamPingServer{stream})
}

type PingPongService_StreamPingServer interface {
	Send(*PingResponse) error
	grpc.ServerStream
}

type pingPongServiceStreamPingServer struct {
	grpc.ServerStream
}

func (x *pingPongServiceStreamPingServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PingPongService_ServiceDesc is the grpc.ServiceDesc for PingPongService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PingPongService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "acme.v1.PingPongService",
	HandlerType: (*PingPongServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPing",
			Handler:    _PingPongService_GetPing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPing",
			Handler:       _PingPongService_StreamPing_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "acme/v1/acme.proto",
}
